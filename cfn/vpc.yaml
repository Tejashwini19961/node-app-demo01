AWSTemplateFormatVersion: '2010-09-09'
Description: Base template. 3 public subnets, 3 private subnets, 1 internet gateway, 1 NAT gateway.
Parameters:
  Environment:
    Type: String
    Default: 'node-demo'
    Description: 'Name to be used for tagging and exports'

  CreatedBy:
    Type: String
    Default: "delafuente"

  VPCCidr:
    Type: String
    Default: 10.10.0.0/16

  NatGw:
    Type: String
    Default: 'Yes'
    AllowedValues:
      - 'No'
      - 'Yes'

  SubnetNetCidrBits:
    Type: Number
    Default: 8
    MaxValue: 32
    MinValue: 1
    Description: "Number of bits to use for subnet cidr creation (bits = 32 - SubnetMask eg: for /26 = 32 - 26 = 6bits)"

  AZCount:
    Type: Number
    Default: 3
    AllowedValues: [1,2,3]

Conditions:
  CreateNatGateway: !Equals [!Ref NatGw, 'Yes']

Resources:
  #------- VPC --------
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr #10.2.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: CreatedBy
          Value: !Ref CreatedBy
        - Key: Name
          Value: !Sub "${Environment}-vpc"

  #-------
  #Shared Network layer assets
  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: CreatedBy
          Value: !Ref CreatedBy
  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc
      InternetGatewayId:
        Ref: Igw

  #1st AZ Public layer
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      # CidrBlock: !Ref PublicSubnet1Cidr #10.0.0.0/18
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt Vpc.CidrBlock, 6, !Ref SubnetNetCidrBits ]]
      VpcId:
        Ref: Vpc
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: CreatedBy
          Value: !Ref CreatedBy
        - Key: Name
          Value: !Sub "${Environment}-pub-snet-1"

  PublicSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
        - Key: CreatedBy
          Value: !Ref CreatedBy
        - Key: Name
          Value: !Sub "${Environment}-pub-rt-1"

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnet1RouteTable
      SubnetId:
        Ref: PublicSubnet1

  PublicSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: Igw
    DependsOn:
      - Igw

  #------- NAT Gateway & EIP ---------------------
  Eip:
    Condition: CreateNatGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: CreatedBy
          Value: !Ref CreatedBy
        - Key: Name
          Value: !Sub "${Environment}-eip-1"

  NatGateway:
    Condition: CreateNatGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - Eip
          - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
        - Key: CreatedBy
          Value: !Ref CreatedBy
        - Key: Name
          Value: !Sub "${Environment}-nat-gw"

  #2nd AZ Public layer
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      # CidrBlock: !Ref PublicSubnet2Cidr #10.0.64.0/18
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt Vpc.CidrBlock, 6, !Ref SubnetNetCidrBits ]]
      VpcId:
        Ref: Vpc
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: CreatedBy
          Value: !Ref CreatedBy
        - Key: Name
          Value: !Sub "${Environment}-pub-snet-2"

  PublicSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
        - Key: CreatedBy
          Value: !Ref CreatedBy
        - Key: Name
          Value: !Sub "${Environment}-pub-rt-2"

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnet2RouteTable
      SubnetId:
        Ref: PublicSubnet2

  VPCPublicSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: Igw
    DependsOn:
      - Igw

  ######## Private Layer ##########################################################################
  #1st AZ Private layer
  AppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      # CidrBlock: !Ref PrivateSubnet1Cidr #10.0.128.0/18
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt Vpc.CidrBlock, 6, !Ref SubnetNetCidrBits ]]
      VpcId:
        Ref: Vpc
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: CreatedBy
          Value: !Ref CreatedBy
        - Key: Name
          Value: !Sub "${Environment}-app-snet-1"

  AppRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
        - Key: CreatedBy
          Value: !Ref CreatedBy
        - Key: Name
          Value: !Sub "${Environment}-app-rt-1"

  AppRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: AppRouteTable1
      SubnetId:
        Ref: AppSubnet1

  AppDefaultRoute1:
    Condition: CreateNatGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: AppRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway


  #2nd AZ Private layer
  AppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      # CidrBlock: !Ref PrivateSubnet2Cidr #10.0.192.0/18
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt Vpc.CidrBlock, 6, !Ref SubnetNetCidrBits ]]
      VpcId:
        Ref: Vpc
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: CreatedBy
          Value: !Ref CreatedBy
        - Key: Name
          Value: !Sub "${Environment}-app-snet-2"
  AppRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
        - Key: CreatedBy
          Value: !Ref CreatedBy
        - Key: Name
          Value: !Sub "${Environment}-app-rt-2"

  AppRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: AppRouteTable2
      SubnetId:
        Ref: AppSubnet2

  AppDefaultRoute2:
    Condition: CreateNatGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: AppRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway



########## Exports ################################################################################
Outputs:
  # VPC Export
  VpcId:
    Description: The logical id of VPC.
    Value: !Ref Vpc
    Export:
      Name: !Join [ "-", [ !Ref Environment, vpc ] ]

  # Public subnet exports
  PublicSubnet1Id:
    Description: The logical id of Public subnet 1.
    Value: !Ref PublicSubnet1
    Export:
      Name: !Join [ "-", [ !Ref Environment, pub-snet-1 ] ]
  PublicSubnet2Id:
    Description: The logical id of Public subnet 2.
    Value: !Ref PublicSubnet2
    Export:
      Name: !Join [ "-", [ !Ref Environment, pub-snet-2 ] ]
#  StackVPCPublicSubnet3:
#    Description: The logical id of Public subnet 3.
#    Value: !Ref VPCPublicSubnet3
#    Export:
#      Name: !Join [ "-", [ !Ref "AWS::StackName", VPCPublicSubnet3 ] ]

  # Private subnet exports
  AppSubnet1Id:
    Description: The logical id of App subnet 1.
    Value: !Ref AppSubnet1
    Export:
      Name: !Join [ "-", [ !Ref Environment, app-snet-1 ] ]

  AppSubnet2Id:
    Description: The logical id of App subnet 2.
    Value: !Ref AppSubnet2
    Export:
      Name: !Join [ "-", [ !Ref Environment, app-snet-2 ] ]

#  StackVPCPrivateSubnet3:
#    Description: The logical id of Private subnet 3.
#    Value: !Ref VPCPrivateSubnet3
#    Export:
#      Name: !Join [ ":", [ !Ref "AWS::StackName", VPCPrivateSubnet3 ] ]


###########################################################################################################
###########################################################################################################




##3rd AZ Public Layer
#  VPCPublicSubnet3:
#    Type: AWS::EC2::Subnet
#    Properties:
#      # CidrBlock: !Ref PublicSubnet1Cidr #10.0.0.0/18
#      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 6, !Ref SubnetNetCidrBits ]]
#      VpcId:
#        Ref: VPC
#      AvailabilityZone:
#        Fn::Select:
#          - 2
#          - Fn::GetAZs: ""
#      MapPublicIpOnLaunch: true
#      Tags:
#        - Key: CreatedBy
#          Value: !Ref CreatedBy
#        - Key: Name
#          Value: !Sub "${Environment}PublicSubnet3"
#  VPCPublicSubnet3RouteTable:
#    Type: AWS::EC2::RouteTable
#    Properties:
#      VpcId:
#        Ref: VPC
#      Tags:
#        - Key: CreatedBy
#          Value: !Ref CreatedBy
#        - Key: Name
#          Value: !Sub "${Environment}PublicRouteTable3"
#  VPCPublicSubnet3RouteTableAssociation:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      RouteTableId:
#        Ref: VPCPublicSubnet3RouteTable
#      SubnetId:
#        Ref: VPCPublicSubnet3
#  VPCPublicSubnet3DefaultRoute:
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId:
#        Ref: VPCPublicSubnet3RouteTable
#      DestinationCidrBlock: 0.0.0.0/0
#      GatewayId:
#        Ref: VPCIGW
#    DependsOn:
#      - VPCGW
#  VPCPublicSubnet3EIP:
#    Type: AWS::EC2::EIP
#    Properties:
#      Domain: vpc
#      Tags:
#        - Key: CreatedBy
#          Value: !Ref CreatedBy
#        - Key: Name
#          Value: !Sub "${Environment}PublicSubnetEIP"
#  VPCPublicSubnet3NATGateway:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId:
#        Fn::GetAtt:
#          - VPCPublicSubnet3EIP
#          - AllocationId
#      SubnetId:
#        Ref: VPCPublicSubnet3
#      Tags:
#        - Key: CreatedBy
#          Value: !Ref CreatedBy
#        - Key: Name
#          Value: !Sub "${Environment}PublicSubnet3Nat"




#  #3rd AZ Private layer
#  VPCPrivateSubnet3:
#    Type: AWS::EC2::Subnet
#    Properties:
#      # CidrBlock: !Ref PrivateSubnet3Cidr
#      CidrBlock: !Select [ 5, !Cidr [ !GetAtt VPC.CidrBlock, 6, !Ref SubnetNetCidrBits ]]
#      VpcId:
#        Ref: VPC
#      AvailabilityZone:
#        Fn::Select:
#          - 2
#          - Fn::GetAZs: ""
#      MapPublicIpOnLaunch: false
#      Tags:
#        - Key: CreatedBy
#          Value: !Ref CreatedBy
#        - Key: Name
#          Value: !Sub "${Environment}PublicSubnet3"
#  VPCPrivateSubnet3RouteTable:
#    Type: AWS::EC2::RouteTable
#    Properties:
#      VpcId:
#        Ref: VPC
#      Tags:
#        - Key: CreatedBy
#          Value: !Ref CreatedBy
#  VPCPrivateSubnet3RouteTableAssociation:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      RouteTableId:
#        Ref: VPCPrivateSubnet3RouteTable
#      SubnetId:
#        Ref: VPCPrivateSubnet3
#  VPCPrivateSubnet3DefaultRoute:
#    Type: AWS::EC2::Route
#    Properties:
#      RouteTableId:
#        Ref: VPCPrivateSubnet3RouteTable
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId:
#        Ref: VPCPublicSubnet3NATGateway
#

